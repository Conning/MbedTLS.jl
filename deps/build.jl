using BinaryProvider, Libdl

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libmbedx509"], :libmbedx509),
    LibraryProduct(prefix, String["libmbedcrypto"], :libmbedcrypto),
    LibraryProduct(prefix, String["libmbedtls"], :libmbedtls),
]

const juliaprefix = joinpath(Sys.BINDIR, "..")

juliaproducts = Product[
    LibraryProduct(juliaprefix, "libmbedx509", :libmbedx509),
    LibraryProduct(juliaprefix, "libmbedtls", :libmbedtls),
    LibraryProduct(juliaprefix, "libmbedcrypto", :libmbedcrypto),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaWeb/MbedTLSBuilder/releases/download/v0.19.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.7.9.aarch64-linux-gnu.tar.gz", "b86f8db61536473f42c8c63ab95a9252a231247d5f3adef9e0846a192b8f9dff"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/MbedTLS.v2.7.9.aarch64-linux-musl.tar.gz", "572bf395f653f30c9f3c6a772205468755d18ca731f36edeed41dc53257143a5"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/MbedTLS.v2.7.9.arm-linux-gnueabihf.tar.gz", "fbf7e56dc56de00b2248c89b4d290bdba3382194523037fa359a4bbd38dbbf31"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/MbedTLS.v2.7.9.arm-linux-musleabihf.tar.gz", "ce5d0394cbd4e48fdb3e75264bf73e36a6f8615ddf7120e02f943a3c8e48b4d9"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.7.9.i686-linux-gnu.tar.gz", "be540956c4cb98cd737ad95eb1e14811402d6161a2a3798806f89aa771d63dc1"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/MbedTLS.v2.7.9.i686-linux-musl.tar.gz", "169aaff4cda28a2c8a255e0c1311983b1d5ea6c71d6290e0213d57a6d90a53eb"),
    Windows(:i686) => ("$bin_prefix/MbedTLS.v2.7.9.i686-w64-mingw32.tar.gz", "0cf6979413b7d0e86a0fa23db245e320c5f254623df562e22f4c95fe0843eca6"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.7.9.powerpc64le-linux-gnu.tar.gz", "97c964d97a00347fa0d427a5eed69069c7a49cfbfdd95669e73258f86b023179"),
    MacOS(:x86_64) => ("$bin_prefix/MbedTLS.v2.7.9.x86_64-apple-darwin14.tar.gz", "c2f84fff996d39bd906af64f081713f32f082aaf3b011dbf7946820baf6b0059"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.7.9.x86_64-linux-gnu.tar.gz", "443e2c0ca354a8d4afe8bb3a5c60a801b6fb7370f16cc12bcc2473fb97eaaeb1"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/MbedTLS.v2.7.9.x86_64-linux-musl.tar.gz", "e2f3e23084359c66436a5f1481765781ddbd8a0031542856dd2a3b9bc37645f7"),
    FreeBSD(:x86_64) => ("$bin_prefix/MbedTLS.v2.7.9.x86_64-unknown-freebsd11.1.tar.gz", "8f1853611c27b38e3690c907901d0e79eb82297f3d290e47a1e6cdf35b91ec78"),
    Windows(:x86_64) => ("$bin_prefix/MbedTLS.v2.7.9.x86_64-w64-mingw32.tar.gz", "8221d349e85dbff86fbb76281335b91af23beb6cb5818428af2e3324ed359515"),
    )

# First, check to see if we're all satisfied
gpl = haskey(ENV, "USE_GPL_MBEDTLS")
forcebuild = parse(Bool, get(ENV, "FORCE_BUILD", "false")) || gpl
done = false
if any(!satisfied(p; verbose=verbose) for p in products) || forcebuild
    if haskey(download_info, platform_key()) && !forcebuild
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
        done = all(satisfied(p; verbose=verbose) for p in products)
        done && @info "using prebuilt binaries"
    end
    if !done && all(satisfied(p; verbose=verbose) for p in juliaproducts) && !forcebuild
        @info "using julia-shippied binaries"
        products = juliaproducts
    elseif !done || forcebuild
        @info "attempting source build"
        VERSION = "2.7.9"
        url, hash = haskey(ENV, "USE_GPL_MBEDTLS") ?
            ("https://tls.mbed.org/download/mbedtls-$VERSION-gpl.tgz", "2f296151cfc0d32ae6c061b403533c13995c9a3e58541346e1aa2dbcdaac3627") :
            ("https://tls.mbed.org/download/mbedtls-$VERSION-apache.tgz", "18e57260b46579245744adb79c2924194dad36aac38c2d0be9e749b9181c706f")
        download_verify(url, hash, joinpath(@__DIR__, "mbedtls.tgz"), force=true, verbose=true)
        unpack(joinpath(@__DIR__, "mbedtls.tgz"), @__DIR__; verbose=true)
        withenv("VERSION"=>VERSION) do
            run(Cmd(`./build.sh`, dir=@__DIR__))
        end
        if any(!satisfied(p; verbose=verbose) for p in products)
            error("attempted to build mbedtls shared libraries, but they couldn't be located (deps/usr/lib)")
        end
    end
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
