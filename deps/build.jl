using BinaryProvider, Libdl

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libmbedcrypto"], :libmbedcrypto),
    LibraryProduct(prefix, String["libmbedtls"], :libmbedtls),
    LibraryProduct(prefix, String["libmbedx509"], :libmbedx509),
]

const juliaprefix = joinpath(Sys.BINDIR, "..")

juliaproducts = Product[
    LibraryProduct(juliaprefix, "libmbedtls", :libmbedtls)
    LibraryProduct(juliaprefix, "libmbedcrypto", :libmbedcrypto)
    LibraryProduct(juliaprefix, "libmbedx509", :libmbedx509)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaWeb/MbedTLSBuilder/releases/download/v0.11"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/MbedTLS.v1.0.0.aarch64-linux-gnu.tar.gz", "385338cc378fc7f60417b516229ec25363e3dbf85815ca1b10443b609cef24d0"),
    Linux(:aarch64, :musl) => ("$bin_prefix/MbedTLS.v1.0.0.aarch64-linux-musl.tar.gz", "c6ee85ea70b80c27adf176ccd5110993559334e6cec56331032967870a2f116f"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/MbedTLS.v1.0.0.arm-linux-gnueabihf.tar.gz", "35ad759b77a789719f5d28b38238a215a86786f969278d546649c8b49db59879"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/MbedTLS.v1.0.0.arm-linux-musleabihf.tar.gz", "591591e59e20847ead2bc438fa871f1a4030207a4d3949d62601e1a0502e9206"),
    Linux(:i686, :glibc) => ("$bin_prefix/MbedTLS.v1.0.0.i686-linux-gnu.tar.gz", "366eb1fc9af92457c559593e23f50ab9e9c159b8c4e9d64c3c299f8bef296781"),
    Linux(:i686, :musl) => ("$bin_prefix/MbedTLS.v1.0.0.i686-linux-musl.tar.gz", "5ca97e759f58826e823dc1c65bcb2bd3a9a60fe617111e5cdb5f34d8c08ffed7"),
    Windows(:i686) => ("$bin_prefix/MbedTLS.v1.0.0.i686-w64-mingw32.tar.gz", "f96931400068678c98bcd25f224cbc94f2622015196bd57e15c495fc3870cb45"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/MbedTLS.v1.0.0.powerpc64le-linux-gnu.tar.gz", "dade22c04189bf73b40d0e4548efa4f47168a145b0dcc663143b0cb9b18cff28"),
    MacOS(:x86_64) => ("$bin_prefix/MbedTLS.v1.0.0.x86_64-apple-darwin14.tar.gz", "5faed0ab6d3f3d5632055cd616370805f22e719ba1fdfdf0768c9946fcb81fb6"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/MbedTLS.v1.0.0.x86_64-linux-gnu.tar.gz", "6f84293f924661d8fa0b82cd1f4e418696c3f346b5390bc336029142ad1673ec"),
    Linux(:x86_64, :musl) => ("$bin_prefix/MbedTLS.v1.0.0.x86_64-linux-musl.tar.gz", "953eea318471e4af935b36aedc58f56ae66ffe66fb50fe90770a204eaa0bafa8"),
    FreeBSD(:x86_64) => ("$bin_prefix/MbedTLS.v1.0.0.x86_64-unknown-freebsd11.1.tar.gz", "7a64ea129903bc8b62ff79e56e6017336c3464b8358c4340b14b09d6b6dae83c"),
    Windows(:x86_64) => ("$bin_prefix/MbedTLS.v1.0.0.x86_64-w64-mingw32.tar.gz", "2aeb0f35683ff1366676b23cb60f51248c645975479a5f6aea1012d680844e08"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products) || get(ENV, "FORCE_BUILD", "false") != "true"
    if haskey(download_info, platform_key()) && get(ENV, "FORCE_BUILD", "false") != "true" && !haskey(ENV, "USE_GPL_MBEDTLS")
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
        @info "using prebuilt binaries"
    elseif all(satisfied(p; verbose=verbose) for p in juliaproducts) && get(ENV, "FORCE_BUILD", "false") != "true"
        @info "using julia-shippied binaries"
        products = juliaproducts
    else
        @info "attempting source build"
        VERSION = "2.7.0"
        url, hash = haskey(ENV, "USE_GPL_MBEDTLS") ?
            ("https://tls.mbed.org/download/mbedtls-$VERSION-gpl.tgz", "2c6fe289b4b50bf67b4839e81b07fcf52a19f5129d0241d2aa4d49cb1ef11e4f") :
            ("https://tls.mbed.org/download/mbedtls-$VERSION-apache.tgz", "aeb66d6cd43aa1c79c145d15845c655627a7fc30d624148aaafbb6c36d7f55ef")
        download_verify(url, hash, joinpath(@__DIR__, "mbedtls.tgz"), force=true, verbose=true)
        unpack(joinpath(@__DIR__, "mbedtls.tgz"), @__DIR__; verbose=true)
        withenv("VERSION"=>VERSION) do
            run(Cmd(`./build.sh`, dir=@__DIR__))
        end
        if any(!satisfied(p; verbose=verbose) for p in products)
            error("attempted to build mbedtls shared libraries, but they couldn't be located (deps/usr/lib)")
        end
    end
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
