using BinaryProvider, Compat, Compat.Libdl

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libmbedcrypto"], :libmbedcrypto),
    LibraryProduct(prefix, String["libmbedtls"], :libmbedtls),
    LibraryProduct(prefix, String["libmbedx509"], :libmbedx509),
]

const juliaprefix = joinpath(Compat.Sys.BINDIR, "..")

juliaproducts = Product[
    LibraryProduct(juliaprefix, "libmbedtls", :libmbedtls)
    LibraryProduct(juliaprefix, "libmbedcrypto", :libmbedcrypto)
    LibraryProduct(juliaprefix, "libmbedx509", :libmbedx509)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaWeb/MbedTLSBuilder/releases/download/v0.15.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.13.1.aarch64-linux-gnu.tar.gz", "9ec1cf7fc9b6581a8b7dde2dec193c213306206c42d9568c7718bda9d2df0515"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/MbedTLS.v2.13.1.aarch64-linux-musl.tar.gz", "71b68723d73014ce04f78d1d4dcec99400a73762b3ea237e61a872783f2ebe04"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/MbedTLS.v2.13.1.arm-linux-gnueabihf.tar.gz", "50843f0cd0867711bc8309894e8c7847c254760efb87648f3ee0745f8db87bb2"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/MbedTLS.v2.13.1.arm-linux-musleabihf.tar.gz", "5e6f09263b51fe2c818d2c9ad458e0a918b4abe5e213bc6b6d3a0be5d471eda6"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.13.1.i686-linux-gnu.tar.gz", "f8b65ab85f19a3b7f269f5148402fa4f6732ba8a89f91b4f56d5c6e0c2d7e8cf"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/MbedTLS.v2.13.1.i686-linux-musl.tar.gz", "c1c76bd8d0fd5be0a90ce8c49928cb5066ff37525f5dcead67b740635ef6291f"),
    Windows(:i686) => ("$bin_prefix/MbedTLS.v2.13.1.i686-w64-mingw32.tar.gz", "4e666b9db38a6b825aa8466d904111cd9669e5b2a7cefe70f5a6a4c5c5fe9c37"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.13.1.powerpc64le-linux-gnu.tar.gz", "e812190d02708af184da79aae9c1bd065b4ab607fb73afdd46d8cb6ff050eb91"),
    MacOS(:x86_64) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-apple-darwin14.tar.gz", "ffd8c4755a2506d1a77772bf61e4b48305067e3beceb27dab26c7ac6fe507020"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-linux-gnu.tar.gz", "a4623eb6af5f949ec19fe0caf88825588b6d7e258e46762f5ef5f6bd9a7ca66c"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-linux-musl.tar.gz", "c9038747b112692f13bdf9b0a4640a72fa6172b4de7f9eb53967b80e586e5c35"),
    FreeBSD(:x86_64) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-unknown-freebsd11.1.tar.gz", "66ee885d81a59e79128a156a2a14b11ea45d225db0ab6359dc45fd1e13b7b4ad"),
    Windows(:x86_64) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-w64-mingw32.tar.gz", "b2160a9627bc843efe0977129fd110131f3bd86c423fbf749f8aeb732698a2af"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products) || get(ENV, "FORCE_BUILD", "false") != "true"
    if haskey(download_info, platform_key()) && get(ENV, "FORCE_BUILD", "false") != "true" && !haskey(ENV, "USE_GPL_MBEDTLS")
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
        Compat.@info "using prebuilt binaries"
    elseif all(satisfied(p; verbose=verbose) for p in juliaproducts) && get(ENV, "FORCE_BUILD", "false") != "true"
        Compat.@info "using julia-shippied binaries"
        products = juliaproducts
    else
        Compat.@info "attempting source build"
        VERSION = "2.13.0"
        url, hash = haskey(ENV, "USE_GPL_MBEDTLS") ?
            ("https://tls.mbed.org/download/mbedtls-$VERSION-gpl.tgz", "a08ddf08aae55fc4f48fbc6281fcb08bc5c53ed53ffd15355ee0d75ec32b53ae") :
            ("https://tls.mbed.org/download/mbedtls-$VERSION-apache.tgz", "593b4e4d2e1629fc407ab4750d69fa309a0ddb66565dc3deb5b60eddbdeb06da")
        download_verify(url, hash, joinpath(@__DIR__, "mbedtls.tgz"), force=true, verbose=true)
        unpack(joinpath(@__DIR__, "mbedtls.tgz"), @__DIR__; verbose=true)
        withenv("VERSION"=>VERSION) do
            run(Cmd(`./build.sh`, dir=@__DIR__))
        end
        if any(!satisfied(p; verbose=verbose) for p in products)
            error("attempted to build mbedtls shared libraries, but they couldn't be located (deps/usr/lib)")
        end
    end
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
