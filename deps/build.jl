using BinaryProvider, Compat, Compat.Libdl

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = Product[
    LibraryProduct(prefix, String["libmbedcrypto"], :libmbedcrypto),
    LibraryProduct(prefix, String["libmbedtls"], :libmbedtls),
    LibraryProduct(prefix, String["libmbedx509"], :libmbedx509),
]

const juliaprefix = joinpath(Compat.Sys.BINDIR, "..")

juliaproducts = Product[
    LibraryProduct(juliaprefix, "libmbedtls", :libmbedtls)
    LibraryProduct(juliaprefix, "libmbedcrypto", :libmbedcrypto)
    LibraryProduct(juliaprefix, "libmbedx509", :libmbedx509)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaWeb/MbedTLSBuilder/releases/download/v0.9"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/MbedTLS.aarch64-linux-gnu.tar.gz", "bbd4602ebf24088c91b752a7f05305bab843f58375ea62bcbd67e0bea81b3c23"),
    BinaryProvider.Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/MbedTLS.arm-linux-gnueabihf.tar.gz", "58d2096693304c0c53db9afb65fb11cd34a76562529ae51e73af98682bfc058a"),
    BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/MbedTLS.i686-linux-gnu.tar.gz", "b2bb3360a2a910b0f58e29cb27dc2a7bb2b9f389a78e19216779fb40cbd0db2b"),
    BinaryProvider.Windows(:i686, :blank_libc, :blank_abi) => ("$bin_prefix/MbedTLS.i686-w64-mingw32.tar.gz", "d18e89c7d8fe1cbf8af42dd18bcf99c6703d548a5fb27bb94882327fcedf7189"),
    BinaryProvider.Linux(:powerpc64le, :glibc, :blank_abi) => ("$bin_prefix/MbedTLS.powerpc64le-linux-gnu.tar.gz", "183aa84778661e2e057863d7dfd0da753f47bbf12e3e9b1691edb93cbf1c9220"),
    BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/MbedTLS.x86_64-apple-darwin14.tar.gz", "4d19ca78eb097dfe24836e9ab534088c8d27d97e8912537f031ac6ce21fd107e"),
    BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/MbedTLS.x86_64-linux-gnu.tar.gz", "c51dd1238cd26d126049af34b64f1e85d2aaee91d9648767c1465198d09221b0"),
    BinaryProvider.Windows(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/MbedTLS.x86_64-w64-mingw32.tar.gz", "d9a1729ee87c24cd985843c867d1da9082813c65e788e39059ba53aaa03f3506"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products) || get(ENV, "MBEDTLS_JL_FORCE_BUILD", "false") != "true"
    if haskey(download_info, platform_key()) && get(ENV, "MBEDTLS_JL_FORCE_BUILD", "false") != "true" && !haskey(ENV, "USE_GPL_MBEDTLS")
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
        Compat.@info "using prebuilt binaries"
        write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
    elseif all(satisfied(p; verbose=verbose) for p in juliaproducts) && get(ENV, "MBEDTLS_JL_FORCE_BUILD", "false") != "true"
        Compat.@info "using julia-shipped binaries"
        products = juliaproducts
    else
        Compat.@info "attempting source build"
        VERSION = "2.7.0"
        url, hash = haskey(ENV, "USE_GPL_MBEDTLS") ?
            ("https://tls.mbed.org/download/mbedtls-$VERSION-gpl.tgz", "2c6fe289b4b50bf67b4839e81b07fcf52a19f5129d0241d2aa4d49cb1ef11e4f") :
            ("https://tls.mbed.org/download/mbedtls-$VERSION-apache.tgz", "aeb66d6cd43aa1c79c145d15845c655627a7fc30d624148aaafbb6c36d7f55ef")
        download_verify(url, hash, joinpath(@__DIR__, "mbedtls.tgz"), force=true, verbose=true)
        unpack(joinpath(@__DIR__, "mbedtls.tgz"), @__DIR__; verbose=true)
        withenv("VERSION"=>VERSION) do
            run(Cmd(`./build.sh`, dir=@__DIR__))
        end
        if any(!satisfied(p; verbose=verbose) for p in products)
            error("attempted to build mbedtls shared libraries, but they couldn't be located (deps/usr/lib)")
        end
    end
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
